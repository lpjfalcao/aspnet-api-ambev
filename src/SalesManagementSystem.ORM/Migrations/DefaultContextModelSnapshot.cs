// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesManagementSystem.ORM;

#nullable disable

namespace SalesManagementSystem.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("654846d5-a5b3-47a0-a503-741accfd0f6d"),
                            Location = "Nordeste do Brasil",
                            Name = "Nordeste"
                        },
                        new
                        {
                            Id = new Guid("bc50086e-21be-4188-b4b3-10cc63927ba3"),
                            Location = "Sudeste do Brasil",
                            Name = "Sudeste"
                        },
                        new
                        {
                            Id = new Guid("780fc7c0-b86e-4ee8-8bae-518ca75ef200"),
                            Location = "Norte do Brasil",
                            Name = "Norte"
                        });
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a35ee010-bca0-42d2-a662-a362475255ed"),
                            Email = "neo@email.com",
                            Name = "Neo"
                        },
                        new
                        {
                            Id = new Guid("7bfc1fee-ac07-4326-94a0-95f2c331e260"),
                            Email = "morpheus@email.com",
                            Name = "Morpheus"
                        },
                        new
                        {
                            Id = new Guid("91e27f09-c405-4a09-8450-4c016fa38430"),
                            Email = "trinity@email.com",
                            Name = "Trinity"
                        });
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c032dec-2fbf-472b-8a66-9b332b289e08"),
                            BranchId = new Guid("654846d5-a5b3-47a0-a503-741accfd0f6d"),
                            CustomerId = new Guid("a35ee010-bca0-42d2-a662-a362475255ed"),
                            IsCancelled = false,
                            OrderDate = new DateOnly(2024, 12, 5),
                            TotalAmount = 199.98m
                        },
                        new
                        {
                            Id = new Guid("afc53abe-c973-4dda-bae4-8e7a12ec4635"),
                            BranchId = new Guid("bc50086e-21be-4188-b4b3-10cc63927ba3"),
                            CustomerId = new Guid("7bfc1fee-ac07-4326-94a0-95f2c331e260"),
                            IsCancelled = false,
                            OrderDate = new DateOnly(2024, 12, 5),
                            TotalAmount = 99.99m
                        },
                        new
                        {
                            Id = new Guid("db08cc4d-a1e5-4459-bf64-64395a1bb038"),
                            BranchId = new Guid("780fc7c0-b86e-4ee8-8bae-518ca75ef200"),
                            CustomerId = new Guid("91e27f09-c405-4a09-8450-4c016fa38430"),
                            IsCancelled = false,
                            OrderDate = new DateOnly(2024, 12, 5),
                            TotalAmount = 2099.79m
                        });
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("13e46eaf-df54-4d87-adc5-4f3274bab0eb"),
                            Discount = 0m,
                            OrderId = new Guid("4c032dec-2fbf-472b-8a66-9b332b289e08"),
                            ProductId = new Guid("bcd13823-964d-498f-8f78-980aba3ee56f"),
                            Quantity = 1,
                            UnitPrice = 99.99m
                        },
                        new
                        {
                            Id = new Guid("8a753aa0-c60a-403e-b3c5-6ab0bd728cb0"),
                            Discount = 0m,
                            OrderId = new Guid("4c032dec-2fbf-472b-8a66-9b332b289e08"),
                            ProductId = new Guid("75bc82b9-7463-432b-9515-ad7aa58e53b1"),
                            Quantity = 1,
                            UnitPrice = 99.99m
                        },
                        new
                        {
                            Id = new Guid("5554a5b9-59fc-4b39-b2d2-eb4e0aea2f75"),
                            Discount = 0m,
                            OrderId = new Guid("afc53abe-c973-4dda-bae4-8e7a12ec4635"),
                            ProductId = new Guid("1df6f7aa-7f21-437d-a933-64040078dfe3"),
                            Quantity = 1,
                            UnitPrice = 99.99m
                        },
                        new
                        {
                            Id = new Guid("a961d01e-ba3c-44ad-8bf0-5a552fd16df4"),
                            Discount = 0m,
                            OrderId = new Guid("db08cc4d-a1e5-4459-bf64-64395a1bb038"),
                            ProductId = new Guid("8557301e-2b65-4318-9f14-be00bffb0004"),
                            Quantity = 21,
                            UnitPrice = 99.99m
                        });
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcd13823-964d-498f-8f78-980aba3ee56f"),
                            Description = "Fontes de ouvido",
                            Name = "Fone de ouvido bluetooth"
                        },
                        new
                        {
                            Id = new Guid("75bc82b9-7463-432b-9515-ad7aa58e53b1"),
                            Description = "Videogame",
                            Name = "PlayStation 5 Digital Edition"
                        },
                        new
                        {
                            Id = new Guid("1df6f7aa-7f21-437d-a933-64040078dfe3"),
                            Description = "Smartphone de última geração",
                            Name = "Smartphone Samsumg Galaxy A15"
                        },
                        new
                        {
                            Id = new Guid("8557301e-2b65-4318-9f14-be00bffb0004"),
                            Description = "Controle de videogame para o PC",
                            Name = "Joystick Dual Shock USB"
                        },
                        new
                        {
                            Id = new Guid("77407f66-0e7f-4b0f-9b50-dd26aa5ba504"),
                            Description = "Jogo clássico da Blizzard Entertainment de estratégia em 3D",
                            Name = "Warcraft III: Ultimate Edition"
                        },
                        new
                        {
                            Id = new Guid("f50cf636-63a3-49af-92df-9bf274b93733"),
                            Description = "Jogo da Insominiac game de aventura em terceira pessoa",
                            Name = "Ratchet & Clank"
                        },
                        new
                        {
                            Id = new Guid("e7d93403-7a58-4755-9e4e-e991782a3267"),
                            Description = "Dispositivo eletrônico",
                            Name = "Smart Watch Apple"
                        },
                        new
                        {
                            Id = new Guid("6887a1dc-f10b-44f4-975d-41e5422521c6"),
                            Description = "Jogo clássico para Nintendo 64",
                            Name = "The Legend of Zelda: Ocarina of Time Last Edition"
                        });
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Order", b =>
                {
                    b.HasOne("SalesManagementSystem.Domain.Entities.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesManagementSystem.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("SalesManagementSystem.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesManagementSystem.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SalesManagementSystem.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
